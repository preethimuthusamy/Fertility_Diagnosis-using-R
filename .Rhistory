local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
q()
setwd("~/")
#Tidyverse
library(dplyr)
library(ggplot2)
#Tidyverse
library(dplyr)
library(ggplot2)
library(tidyr)
library(gapminder)
install.packages("gapminder")
install.packages("ggplot2")
install.packages("~/R/win-library/3.6/dplyr/R/dplyr", repos = NULL)
install.packages("gapminder")
library(MASS, lib.loc = "C:/Program Files/R/R-3.6.1/library")
install.packages("gapminder")
library(ggplot2)
#create object gapminder_1952
#Box Plot for continent and
#gdpPercap
ggplot(data=gapminder_1952,
aes(x=continent,
y=gdpPercap))+
geom_boxplot()+
scale_y_log10()+
ggtitle("Comparision chart")
gapminder
comics <- read.csv("C:/Users/ACER/Downloads/comics.csv")
View(comics)
#Structure of comics
str(comics)
library(dplyr)
glimpse(comics)
#Print thr first row/ head
names(comics)
#Check the levels of align
levels(comics$align)
#Check the levels of gender
levels(comics$gender)
#Create a 2-way Contingency table
table(comics$align,comics$gender)
#Remove align level,
filter(comics,align=="Reformed Criminals")
comics <- comics %>%
filter(align!="Reformed Criminals")%>%
droplevels()
levels(comics$align)
ggplot(data = comics,
aes(x=align, fill=gender))+
geom_bar()
#Side-by-Side Bar plot align and gender
ggplot(data = comics,
aes(x=align, fill=gender))+
geom_bar(position = "dodge")+
theme(axis.text.x =
element_text(angle = 190))
#Side-by-Side Bar plot align and gender
ggplot(data = comics,
aes(x=align, fill=gender))+
geom_bar(position = "dodge")+
theme(axis.text.x =
element_text(angle = 80))
#Side-by-Side Bar plot align and gender
ggplot(data = comics,
aes(x=align, fill=gender))+
geom_bar(position = "dodge")+
theme(axis.text.x =
element_text(angle = 90))
ggplot(data = comics,
aes(x=align, fill=gender))+
geom_bar()
#Side-by-Side Bar plot align and gender
ggplot(data = comics,
aes(x=align, fill=gender))+
geom_bar(position = "dodge")+
theme(axis.text.x =
element_text(angle = 90))
#Side-by-Side Bar plot align and gender
ggplot(data = comics,
aes(x=align, fill=gender))+
geom_bar(position = "dodge")+
theme(axis.text.x =
element_text(angle = 180))
#Side-by-Side Bar plot align and gender
ggplot(data = comics,
aes(x=align, fill=gender))+
geom_bar(position = "dodge")+
theme(axis.text.x =
element_text(angle = 270))
#Side-by-Side Bar plot align and gender
ggplot(data = comics,
aes(x=align, fill=gender))+
geom_bar(position = "dodge")+
theme(axis.text.x =
element_text(angle = 360))
#Side-by-Side Bar plot align and gender
ggplot(data = comics,
aes(x=align, fill=gender))+
geom_bar(position = "dodge")+
theme(axis.text.x =
element_text(angle = 90))
#Count Vs Proportions
ggplot(data = comics,
aes(x=align, fill=gender))+
geom_bar(position = "fill")+
ylab("Proportions")
#Distribution of one variable
comics$align<-factor(comics$align,
levels = c("Bad",
"Neutral",
"Good"))
ggplot(comics, aes(x=align))+
geom_bar()
#Distribution of one varaible genderwise
ggplot(comics, aes(x=align))+
geom_bar()+
facet_wrap(~gender)
setwd("C:/Users/ACER/Downloads")
#logistic regression
#import the data
dataset = read.csv("Social_Network_Ads.csv")
dataset = dataset[3:5]
#logistic regression
#import the data
dataset = read.csv("Social_Network_Ads.csv")
View(dataset)
dataset = dataset[3:5]
View(dataset)
#takecar of missing data
summary(dataset)  #no missing here
#Encoding Categorical data
class(dataset$Purchased)
dataset$Purchased <- factor(dataset$Purchased,
levels = c(0,1))
dataset$Purchased <- factor(dataset$Purchased)
#Encoding Categorical data
class(dataset$Purchased)
#Splitting the datset into training and test
install.packages(caTools)
install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased,
SplitRatio = 0.75)
training_set =subset(dataset, split==TRUE)
test_set =subset(dataset, split==FALSE)
View(training_set)
View(test_set)
#Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
#fitting logistic regression to training set
?glm
classifier <- glm(formula = Purchased ~ .,
family = binomial(),
data = training_set)
summary(classifier)
y_pred <- ifelse(prob_pred>0.5,1,0)
#predicting the test set Result(type='response' is given probability value from 0 to 1)
prob_pred <- predict(classifier,
type='response',
newdata=test_set[-3])
y_pred <- ifelse(prob_pred>0.5,1,0)
y_pred
#making confusion matrix
cm <- table(test_set[,3],y_pred)
prop.table(cm)
cm
---------------------------------------------------------
#  Date:18.09.2019 –wed-(lab(theory))
#visualizing the Training set result
#install.packages("ElemStatLearn")
library(ElemStatLearn)
---------------------------------------------------------
#  Date:18.09.2019 –wed-(lab(theory))
#visualizing the Training set result
install.packages("ElemStatLearn")
install.packages("ElemStatLearn")
library(ElemStatLearn)
plot(training_set[,-3])
x1=seq(min(set[,1])-1,max(set[,1])+1,
by=0.01)
set <- training_set
x1=seq(min(set[,1])-1,max(set[,1])+1,
by=0.01)
x1
x2=seq(min(set[,2])-1,max(set[,2])+1,
by=0.01)
grid_set <- expand.grid(x1,x2)
grid_set
colnames(grid_set) <- c("Age","EstimatedSalary")
prob_set <- predict(classifier,
type='response',
newdata=grid_set)
prob_set
y_grid <- ifelse(prob_set>0.5,1,0)
y_grid
plot(set[,-3])
#expanded based on x1 and x2
plot(set[,-3], main="logistic Regression",
xlab="age", ylab="EstimatedSalary",
xlim=range(x1),ylim=range(x2))
#tries to draw a line bettwen the x1 and x2(by using the z)
#x<-x1,y<-x2,for z(create a new matrix)
#add is used overwirte the existing graph(old and new will be displayed)
#if add is absent the only a line will be displayed
contour(x=x1,y=x2,
z=matrix(as.numeric(y_grid),
length(x1),
length(x2)),add=T)
points(grid_set, pch='.',
col=ifelse(y_grid==1,
'springgreen3',
'tomato'))
#pch==21(gives a circle shaped color)
points(set, pch=21,
bg=ifelse(set[,3]==1,
'green4',
'red3'))
setwd("C:/Users/ACER/Downloads")
ti=read.csv("titanic (1).csv")
setwd("C:/Users/ACER/Downloads/r programming/r_project")
ti=read.csv("titanic (1).csv")
set.seed(123)
ti=read.csv("titanic (1).csv")
View(ti)
-c(x,name,ticket,fare,cabin,home.dest,embarked)) %>% mutate(pclass=factor(pclass,levels = c(1,2,3),labels = c("Upper","Middle","Lower")),
survived=factor(survived,levels = c(0,1),labels = c("No","Yes")))
c_ti=ti %>% select(-c(x,name,ticket,fare,cabin,home.dest,embarked)) %>% mutate(pclass=factor(pclass,levels = c(1,2,3),labels = c("Upper","Middle","Lower")),
survived=factor(survived,levels = c(0,1),labels = c("No","Yes")))
library(dplyr)
c_ti=ti %>% select(-c(x,name,ticket,fare,cabin,home.dest,embarked)) %>% mutate(pclass=factor(pclass,levels = c(1,2,3),labels = c("Upper","Middle","Lower")),
survived=factor(survived,levels = c(0,1),labels = c("No","Yes")))
View(c_ti)
str(c_ti)
c_ti=na.omit(c_ti)#removes rows with null values
split=sample.split(c_ti$survived,SplitRatio=0.8)
train_set=subset(c_ti, split==TRUE)
test_set =subset(c_ti, split==FALSE)
dim(train_set)
library(rpart)
# y is a factor so class method is used
fit <- rpart(survived~.,data = train_set,method = 'class')
library(rpart.plot)
#to summarize
rpart.plot(fit)
install.packages("randomForest")
set.seed(123)
ti=read.csv("titanic.csv")
ti=read.csv("titanic (1).csv")
View(ti)
shuffel_index=sample(1:nrow(ti))
shuffel_index
#shuffling the data set using shuffel_index that we have created(for rows)
ti=ti[shuffel_index,]
library(dplyr)
c_ti=ti %>% select(-c(x,name,ticket,fare,cabin,home.dest,embarked)) %>% mutate(pclass=factor(pclass,levels = c(1,2,3),labels = c("Upper","Middle","Lower")),
survived=factor(survived,levels = c(0,1),labels = c("No","Yes")))
View(c_ti)
str(c_ti)
c_ti=na.omit(c_ti)#removes rows with null values
library(caTools)
split=sample.split(c_ti$survived,SplitRatio=0.8)
train_set=subset(c_ti, split==TRUE)
test_set =subset(c_ti, split==FALSE)
View(train_set)
View(test_set)
dim(train_set)
install.packages("randomForest")
library("randomForest")
library("randomForest")
install.packages("caret",dependencies = T)
install.packages("caret",dependencies = T)
install.packages("caret",dependencies = T)
#Tidyverse
library(dplyr)
library(ggplot2)
library(tidyr)
library(gapminder)
install.packages("gapminder")
View(gapminder)
library(gapminder)
View(gapminder)
#Filter the dataset for year 1952
gapminder %>% filter(year==1952)
#Filter the dataset for continent is Asia
gapminder %>% filter(continent=="Asia")
#Filter China in 2002
gapminder %>% filter(year==2002,
country=="China")
#lifeExp - arrange
gapminder %>% arrange(desc(lifeExp))
#In 1957 arrange pop from
#highest to lowest
gapminder %>% filter(year==1957) %>%
arrange(desc(pop))
#lifeExp in months
gapminder %>%
mutate(lifeExp=lifeExp*12)
#In 2007, arrange LifeExpMonths in desc order
gapminder %>% filter(year==2007)%>%
mutate(lifeExpMonths=lifeExp*12) %>%
arrange(desc(lifeExpMonths))
#gapminder_1952
gapminder_1952 <- gapminder %>%
filter(year==1952)
library(ggplot2)
#Plot pop vs gdppercap
ggplot(data = gapminder_1952,
aes(x=pop, y=gdpPercap))+
geom_point()
ggplot(data = gapminder_1952,
aes(x=pop, y=gdpPercap))+
geom_point() +
scale_x_log10()
ggplot(data = gapminder_1952,
aes(x=pop, y=gdpPercap))+
geom_point() +
scale_x_log10()+
scale_y_log10()
#Plot x as pop and y as lifeExp
ggplot(data = gapminder_1952,
aes(x=pop, y=gdpPercap,
color=continent,
size=gdpPercap))+
geom_point()+
scale_x_log10()
ggplot(data = gapminder_1952,
aes(x=pop, y=gdpPercap))+
geom_point()+
scale_x_log10()+
facet_wrap(~continent)
rep(1:2, each=2)
rep(1:2, times=3)
seq(from=1, to=4, length.out = 14)
#Gapminder, gdpPercap and Lifexp
#Sub-graph Year
ggplot(data = gapminder,
aes(x=gdpPercap, y=lifeExp,
color = continent,
size=pop))+
geom_point()+
scale_x_log10()+
facet_wrap(~year)
#Summarize average of lifeExp
gapminder %>% summarize(LifeExpMedain=mean(lifeExp))
#Summarize avg of lifExp in 1957
gapminder %>%
filter(year==1957) %>%
summarize(LifeExpMedain=mean(lifeExp))
#Summarize avg of lifExp and
#max of Gdppercap in 1957
gapminder %>%
filter(year==1957) %>%
summarize(LifeExpMedain=mean(lifeExp),
GdpPerCapMax = max(gdpPercap))
#Find the median lifeExp and max
#gdpPercap in each continent in 1957
gapminder %>%
filter(year==1957) %>%
group_by(continent) %>%
summarize(LifeExpMedain=mean(lifeExp),
GdpPerCapMax = max(gdpPercap))
#Create an object by_year Summarize
# MedianLifeExp for each Year
by_year <- gapminder %>%
group_by(year) %>%
summarize(LifeExpMedain=median(lifeExp))
#Scatter plot for by_year
ggplot(data = by_year, aes(x=year,
y=LifeExpMedain)) +geom_point()+
expand_limits(y=0)
#Scatter plot for by_year
ggplot(data = by_year, aes(x=year,
y=LifeExpMedain)) +geom_point()+
expand_limits(y=2)
#Scatter plot for by_year
ggplot(data = by_year, aes(x=year,
y=LifeExpMedain)) +geom_point()+
expand_limits(y=21)
#Scatter plot for by_year
ggplot(data = by_year, aes(x=year,
y=LifeExpMedain)) +geom_point()+
expand_limits(y=10)
#Summarize medianGdpPercap
#within each continent within
#each year: by_year_continent
by_year_continent <- gapminder %>%
group_by(continent,year) %>%
summarize(medianGdpPercap=median(gdpPercap))
#Plot the change in medianGdpPercap
#in each continent over time - Scatter Plot
ggplot(data = by_year_continent,
aes(x=year, y=medianGdpPercap,
color = continent)) +
geom_line()+
expand_limits(y=0)
#Summarize the mediangdpPercap
#by year and continent in 1952.
#Create Object by_contineint
#Bar Plot - Showing medainGdpPercap
#by Continent
by_continent <- gapminder %>%
filter(year==1952) %>%
group_by(continent) %>%
summarize(GdpPerCapMedian =
median(gdpPercap))
ggplot(data=by_continent,
aes(x=continent,
y=GdpPerCapMedian))+
geom_col()
#create object gapminder_1952
#Histrogram Plot for Population
gapminder_1952 <- gapminder %>%
filter(year==1952)
ggplot(data=gapminder_1952,
aes(x=pop)) +
geom_histogram()
class(gapminder_1952$pop)
#create object gapminder_1952
#Box Plot for continent and
#gdpPercap
ggplot(data=gapminder_1952,
aes(x=continent,
y=gdpPercap))+
geom_boxplot()+
scale_y_log10()+
ggtitle("Comparision chart")
#Exploratory Data Analysis
#Read and assign dataset to comics
comics <- read.csv(file = "comics.csv")
View(comics)
#Structure of comics
str(comics)
library(dplyr)
glimpse(comics)
#Print thr first row/ head
names(comics)
#Check the levels of align
levels(comics$align)
#Check the levels of gender
levels(comics$gender)
#Create a 2-way Contingency table
table(comics$align,comics$gender)
#Remove align level,
filter(comics,align=="Reformed Criminals")
comics <- comics %>%
filter(align!="Reformed Criminals")%>%
droplevels()
levels(comics$align)
#Remove align level,
filter(comics,align=="Reformed Criminals")
comics <- comics %>%
filter(align!="Reformed Criminals")%>%
droplevels()
levels(comics$align)
